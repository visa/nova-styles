/**
 *              Copyright (c) 2025 Visa, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **/
const { writeFileSync, readFileSync, existsSync } = require('fs'); 
const path = require('path'); 
const changeCase = require('change-case'); 

const ABSTRACTS_PATH = 'src/scss/abstracts';

const getProperty = (prop, side) => {
  const result = [];
  switch(side) {
    case 'full':
      result.push(prop); 
      break; 
    case 'vertical':
      result.push(`${prop}-top`);
      result.push(`${prop}-bottom`); 
      break; 
    case 'horizontal':
      result.push(`${prop}-left`); 
      result.push(`${prop}-right`);
      break; 
    default: 
      result.push(`${prop}-${side}`);
      break; 
  }

  return result;
}

const generator = (target = 'test', targetPath = ABSTRACTS_PATH) => {
  // _spaces.scss
  console.log("scss abstracts generator: spaces"); 
  const spacesDirectory = path.resolve(`${targetPath}/_spaces.scss`); 
  const properties = ['padding', 'margin']; 
  const sides = ['top', 'bottom', 'right', 'left', 'vertical', 'horizontal', 'full'];

  // get sizes 
  const sizesPath = path.resolve(`${ABSTRACTS_PATH}/_sizes.scss`);
  const _sizes = {};
  if (existsSync(sizesPath)) {
    const sidesFile = readFileSync(sizesPath, 'utf-8').split('\n'); 
    sidesFile.forEach((line) => {
      const _line = line.trim();
      
      if (_line.indexOf('size-') == 0) {
        _sizes[_line.substring(0, _line.indexOf(':'))] = '';
      }
    });
  }

  const sizes = Object.keys(_sizes);
  let content = '/* This file is autogenerated */\n\n'; 

  properties.forEach((prop) => {
    sides.forEach((side) => {
      const props = getProperty(prop, side);

      sizes.forEach((size) => {
      // for (var i=0; i <= 120; i++) {
        const name = prop + (side !== 'full' ? `-${side}` : ''); 
        const unit = size.substring(size.indexOf('-') + 1);

        content += `@mixin ${name}-${unit} { \n`;
        props.forEach((e) => {
          // content += `  ${e}: ${i}px;\n`;
          content += `  ${e}: var(--utils-${size});\n`;
        }); 
        content += '}\n'; 
        content += `.vpds-u-${name}--${unit} { `;
        content += `@include ${name}-${unit}; `;
        content += '}\n\n'; 
      // }
      });

    });
  });

  writeFileSync(spacesDirectory, content); 
  console.log(`${spacesDirectory} generated.`); 
}; 

module.exports = generator; 